# Core StackEntities vs DerivedStacks

## Foundation Concepts

Stacks were first designed to provide a full-context promise to the view/template system. The old style just-enough-data controller actions meant the templates generally received a variety of variables each containing part of the required data. They also spawned lots of complex, special-use query methods. The stack system was conceived to deliver one object with detailed access features and full context for all imagined uses of that objects data. And these objects were build by a simple and extensible StackTable object.

## Early Benefits

With nothing but small proof-of-concept displays, the first versions of Stack objects seem promising as a solution to rendering. They decouple data structures from view logic and reduce the number of variables to be managed in the templates.

They also promise to make helpers and elements more portable by allowing these tools to operate from standardized objects rather than raw data in named variables.

And, it appears they promote efforts to clean up the controller/model query mess that we've fallen victim to in the past.

## Evolving Realities

It's becoming clear though that these StackEntities will need to operate in the business logic domains of the system, not just as an adjunct to the rendering system.

### Context for decisions

All that contextual data can provide the basis for deploying the business rules we write. The objects are clearly going to need to provide an interface to address these needs along with an accessor interface to support rendering.

### Presentation logic too

Some objects, like the ManifestStack which establishes a Supervisor/Artist/Manager contract, will contain control data (in this case Permissions). Those Permissions control what data of can be seen and how it can be acted on.

The Manifest stack will also play a role in at least two different circumstances, from the Supervisors or the Managers perspective. And the object must act differently in each circumstance.

## Not as simple as first thought

So the role of Stack objects is more nuanced than first imagined. This raises questions about how they should be designed and deployed.

The simple one-stackTable-produces-one-full-context-stackEntity pattern is going to cause problems as more nuanced versions of the entities are needed. Continuing on this path will produce entities crammed with data and functionality that is only needed in special circumstances.

And if we start making more tailored stacks we're going to see an explosion of table classes to make them and entity classes to encapsulate them.

We must also consider the data caching system. Stacks are costly to construct and so they are currently cached. New constructors and new types means new cache sets. Closely related types means overlapping cache data and a looming management nightmare. Not to mention, such an explosion of management processes would dilute the value of caching.

## Make core stacks?

One idea is to make and cache Core stacks. These are like the original full data context objects first imagined. But these would not be the end use objects. Each would have a set of Emitter methods. Those tools would construct the special circumstance objects required by API calls, render processes, and business logic.

So It looks like I'm needing one of the **Creational Patterns**:

> “There are two recurring themes in these patterns. First, they all encapsulate knowledge about which concrete classes the system uses. Second, they hide how instances of these classes are created and put together. All the system at large knows about the objects is their interfaces as defined by abstract classes. Consequently, the creational patterns give you a lot of flexibility in what gets created, who creates it, how it gets created, and when. They let you configure a system with “product” objects that vary widely in structure and functionality. Configuration can be static (that is, specified at compile-time) or dynamic (at run-time).”

> *Excerpt From: John Vlissides. “Design Patterns: Elements of Reusable Object-Oriented Software.” iBooks. https://books.apple.com/us/book/design-patterns-elements-reusable-object-oriented-software/id401430102*

On a first glance over the base set of creational patterns, Builder is closest to what I was imagining.

> “If CreateMaze is passed an object that can create a new maze in its entirety using operations for adding rooms, doors, and walls to the maze it builds, then you can use inheritance to change parts of the maze or the way the maze is built. This is an example of the Builder (97) pattern.”

> *Excerpt From: John Vlissides. “Design Patterns: Elements of Reusable Object-Oriented Software.” iBooks. https://books.apple.com/us/book/design-patterns-elements-reusable-object-oriented-software/id401430102*

My notes on the excerpt say:

> This sounds like a possible solution for recomposing CoreStack objects.   
> Pass the transformation instruction set.   
> The flavors of (for example) Manifest would be of similar structure. So subclasses of the builder class could guide the nuanced assembly in each context.  
> Other Core stacks would have other builder hierarchies.  
> But all Builder classes could have a single ‘on switch’.

Topics: Studio Manager, Stack, Layer, Data Structure, 


