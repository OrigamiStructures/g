# Dispositions

A Disposition describes the condition of some population of pieces as being at some state in the real world.

The current schema in dispositions provides far more data points than are required for this limited task.

And, considering the fact that the 'piece' may be a record tracking the number of virtual pieces in the population, the use of a join table from Disposition to Piece represents a dynamic, fuzzy description rather than a concrete mapping.

## The Great Divide

[Also see Pieces: Funtional and Presentational ](/article/pieces-funtional-and-presentational "Pieces: Funtional and Presentational ")

Dispositions must behave in two distinct ways depending on whether they are linked to numbered or un-numbered pieces (roughly equivalent to Limited and Open Editions).

This sets up a fundamental problem. Through the join table we have a ManyToMany linkage and so the possibility of having a disposition that must exhibit both numbered and un-numbered behavior.

### Numbered Behavior

Dispositions linking numbered need to 

- Maintain the full history of events for the effected pieces.
- Record 'Who' and 'Where' data
- Record event Timestamp data
- Support event duration and sequence patterning 
- Optionally enforce event sequences
- Provide user notification of required action based on Timestamp data

### Un-numbered Behavior

- Maintain the set of states that describes the entire effected piece population
- Accept new dispositions and merge them into the existing set to insure one Disposition at each state.
- When merging, adjust the population data on the piece records to insure one piece record for each state.
- Shunt initial Count/Who/Where data to a history linked to a meaningful layer of the Artwork but independent of the disposition set.

## Possible Strategies

### What is the current state?

One problem is identification of the current disposition when there is a set of them extending into the past (and possibly the future).

There are start and end date fields in the disposition but relying on those is to assume that actual events will run in lock-step with recorded data. Bad plan.

Probably some point datum that can mark the current record will work. I have a `complete` field, but depending on that would still mean locating the earliest record that is not complete. Still a sketchy strategy. And computationally heavy. A `current` pointer will allow revealing the current record with a simple find.

Topics: Disposition, Studio Manager