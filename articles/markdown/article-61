# Dispositions

A Disposition describes the condition of some population of pieces as being at some state in the real world.

The current schema in dispositions provides far more data points than are required for this limited task.

And, considering the fact that the 'piece' may be a record tracking the number of virtual pieces in the population, the use of a join table from Disposition to Piece represents a dynamic, fuzzy description rather than a concrete mapping.

## The Great Divide

[Also see Pieces: Funtional and Presentational ](/article/pieces-funtional-and-presentational "Pieces: Funtional and Presentational ")

Dispositions must behave in two distinct ways depending on whether they are linked to numbered or un-numbered pieces (roughly equivalent to Limited and Open Editions).

This sets up a fundamental problem. Through the join table we have a ManyToMany linkage and so the possibility of having a disposition that must exhibit both numbered and un-numbered behavior.

### Numbered Behavior

Dispositions linking numbered need to 

1. Maintain the full history of events for the effected pieces.
2. Record 'Who' and 'Where' data
3. Record event Timestamp data
4. Support event duration
5. Support sequence patterning (templated creation)
5. Support a rule system to enforce event sequences
6. Provide user notification of required action based on Timestamp data

### Un-numbered Behavior
1. Maintain the set of states that describes the entire effected piece population
2. Accept new dispositions and merge them into the existing set to insure one Disposition at each state.
3. When merging, adjust the population data on the piece records to insure one piece record for each state.
4. Shunt initial Count/Who/Where data to a history linked to a meaningful layer of the Artwork but independent of the disposition set.

### Common Requirements

1. Provide fast access to the "current" disposition for page rendering
2. Easy access to factors used in determining the availability of a population for a new disposition
   - Probably the dispositions::type value + knowledge about pending dispositions

## Possible Strategies

### A Lifespan Object?

One problem is identification of the current disposition when there is a set of them extending into the past (and possibly the future).

There are start and end date fields in the disposition but relying on those is to assume that actual events will run in lock-step with recorded data. Bad plan.

Probably some point datum that can mark the current record will work. I have a `complete` field, but depending on that would still mean locating the earliest record that is not complete. Still a sketchy strategy. And computationally heavy. A `current` pointer will allow revealing the current record with a simple find.

![A lifespan object being proposed as an organizing container for dispositions](/img/images/image/96a205e5-499b-461f-9ae9-66c26a615a5e/proposed-Lifespan-object-v1.png "proposed-Lifespan-object-v1")

### Benefits of a Lifespan Object

There are 12 jobs the objects have to help with. This simple structure of a Lifespan object could help with:

- Numbered
   - Maintain the full history of events for the effected pieces.
   - Support sequence patterning (templated creation)
      - This would be the creation of `pending` dispositions
   - Support a rule system to enforce event sequences
      - The maintenance and analysis of `pending` states  accomplishes this
- Un-numbered
   - Maintain the set of states that describes the entire effected piece population
      - The set of `current` dispositions would be the set of states
   - Accept new dispositions and merge them into the existing set to insure one Disposition at each state.
      - Process posted disposition data and use the request to modify the set of `current` states and their population counts. The modified record set is save and the add request is consumed but not directly saved.
   - When merging, adjust the population data on the piece records to insure one piece record for each state.
      - As above, the request is consumed to produce edits but not saved directly. In this case it is a set of effected piece records that are edited
- Common Requirements
   - Provide fast access to the "current" disposition for page rendering
   - Easy access to factors used in determining the availability of a population for a new disposition
      - `current::type` and the existence of pending events are easily detected

### Remaining tasks

- Numbered
   - Record 'Who' and 'Where' data
      - Already supported by available columns
   - Record event Timestamp data
      - Already supported by available columns
   - Provide user notification of required action based on Timestamp data
      - The examination the `current` and `pending` states  aids this
   - Support event duration
- Un-numbered
   - Shunt initial Count/Who/Where data to a history linked to a meaningful layer of the Artwork but independent of the disposition set.

It's this last task for un-numbered pieces that can't be supported by this new object and some manipulation of existing columns and links. The key difference is that we need the history a disposition set provides but histories for this class of piece are divorced from their piece link. A new linking field needs to be created in disposition so the historical records can be shifted off to a layer of the artwork.

## Presentation

Can a shared `current` disposition easily (and meaningfully) simplify rendering of piece lists?

Can some share disposition state that is common and considered 'archived' easily and meaningfully simplify rendering of piece lists?

If the list-simplifications work, when would we use them vs full listings?

Topics: Disposition, Studio Manager