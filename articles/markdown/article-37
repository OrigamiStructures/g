# Guidelines for writing StackTable classes

## Overview

Many of the object represented by table data require records from more than one table for full expression. 

There are two general requirements for a Stack.

1. Contain full metadata to describe the object in any presentation scenario
1. Provide the links that will allow the Stacks of all relevant next-level objects to be constructed

For example, an Artist stack would provide

- The name/address/contact information for the artist
- Links to all the Managers of this Artist if this `Artist->managerOwned( )`
- The link to the Manager of this specific Artist record
- The link to the creator/owner of this specific Artist record
- Links to the Artwork the Manager of this Artist is allowed.

In this way, each stack is fully described for any View use, and serves as a convenient stepping stone to any of it's related data collections

## Choosing a structural pattern

A  'contained' query  brings all the required associated data together in a tree structure. For very deep data sets and sets with multiple internal branches the resulting nested structures are difficult to manage in views that use many elements.

The nested data fragments into new variables as it travels down through the output loops. Upstream context data becomes lost as the loops and elements nest. Stacks are designed to establish a guarantee of full context at every stage of the output process.

This solution creates new Table classes with matching Entity classes and works with flat sets of data rather than trees. A stack entity's properties store flat arrays from the various involved data tables. Methods on the entity and its properties are provided to cherry pick related data from the properties; a random access association system that replaces the tree-walking system of contained data.

The approach to using StackTables and StackEntities is:

- For any user task, do a highly focused query to find the records of interest using standard tables and query methods
- In this query process, ignore related data except what is required to isolate the records of interest.

With this found set in hand:

- Use the appropriate StackTables to acquire the data that provides full context to these isolated records of interest.
- Send the records of interest and the supporting stack data to the view for rendering

### Additional details

As with a tree structure, a stack has a tip, or primary record and many interior records from various sources.

#### An example Stack and its parts

![Overview of a stack](http://g.origamistructures.com/w_img/StackOverviewDiagram.png)

The general goal is, given any random set of one type of interior records, trace back to all their primary records, then build the full stack for each primary record found.

![navigating from seeds to stack-primary](http://g.origamistructures.com/w_img/StackSeedToPrimary.png)

### The StackEntity object

For more details about StackEntities, their Layer properties, and collections of StackSets (collections of stack entities):

- [Interacting with Layer Objects](/article/interacting-with-layer-objects "Interacting with Layer Objects")
- [Interacting with StackEntities](/article/interacting-with-stackentities "Interacting with StackEntities")
- [Interacting with StackSet Objects.](/article/interacting-with-stackset-objects "Interacting with StackSet Objects.")
## Writing a Stack Table class

The basic StackTable implementation requirements

- The new table class must extend `App\Model\Table\StackTables`
- A method to construct stacks from sets of primary record key values
- A set of methods to discover primary records from the seeds you expect to handle
- A property naming the Table classes for the various layers
- A property naming the supported seed points
- A property defining the schema for the StackEntity object that this table class will produce

### Details of the properties

- `$layerTables`  
   StackTables don't use the normal association system directly and this is the system that makes associated tables appear on properties. To maintain this convenient access to related table objects, we name the tables we'll need.

```php
// will be available as $this->Members etc
$layerTables = [
	'Users', 
	'Members', 
	'Contacts', 
	'Addresses', 
	'Artists', 
	'GroupsMembers'
	];
```

  -  `$stackSchema`   
  Normally the table schema becomes the entity schema and entity properties correspond to table columns. StackEntity properties correspond to found sets of table data so you need to define the schema to identify the layers of related data.   
   All normal Entity features are available (eg. virtual fields)
    - Setting a property to type 'layer' will make the entity automatically convert the array data to a Layer object. You should use this setting for all layers. Other non-layer properties you define can be any of valid type.

```php
$stackSchema = 	[	
	['name' => 'user', 'specs' => ['type' => 'layer']],
	['name' => 'member', 'specs' => ['type' => 'layer']],
	['name' => 'contacts', 'specs' => ['type' => 'layer']],
	['name' => 'addresses', 'specs' => ['type' => 'layer']],
	['name' => 'artists', 'specs' => ['type' => 'layer']],
	['name' => 'groups_members', 'specs' => ['type' => 'layer']],
];
```
  - `$seedPoints`   
  Seed points identify the kind of record your initial query found. This is the data that will need the larger stack context to be fully described.
    - Naming the seeds in both singular and plural form means you don't have to remember which inflection to use when you call.

```php
$seedPoints = [
	'user', 'users', 'artist', 'artists'
];
```
- Write the seed methods
   - The parent class `StacksTable` has a custom finder that is the gateway to the seed methods   
   `$ArtStacks->find('stackFrom',  ['layer' => 'artist', 'ids' => $ids]);`   
   The layer argument corresponds to one of the defined seed points.
   The method name must be in the form `loadFrom{EntityName}( )`
   - These methods do the minimum required queries to locate the IDs of the primary records
   - Make these methods protected and always call them through the `findStackFrom( )` custom finder

```php
// for the seed points shown in the example above, create
protected function loadFromUser($ids) { }
protected function loadFromArtist($ids) { }
```

- Write the stack creation method
   - this method will accept an array of primary record IDs
   - make this method public
   - name - stacksFrom{PrimaryTableAlias}   
      if the primary record is Artworks, `stacksFromArtworks($ids)`   
      if the primary record is Members, `stacksFromMembers($ids)`

Topics, Studio manager, Stack, Layer, Design pattern
