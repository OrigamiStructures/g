# Manager Permission

Management and general sharing of Address Book data is not allowed. Import/export features will be provided for Artists and Managers so they can share this data if they wish, but the system views this as private data belonging to the registered user that created it.

The address data that is stored in Dispositions is also controlled even in cases where a Manager or Artist has access to a disposition created by the other.

- If the Artist creates a disposition for a piece that the Manager has access to, the manager can see the Disposition, its type, date, and other status indicators but cannot see any details of who the work was disposed to.
   - Will this cause difficulty for a manager's awareness of 'prestige' placements for the artist? 
   - This might be solved if the artist can publish CV or other summaries that the manager can receive
- If the Manager creates a disposition for an Artist that is a registered user, that Artist can see the name, state, country of the disposition member (and city?).
   - Would this be enough for the Artist to maintain a complete CV or collector history?

Management is enabled by providing a registered user with an Artist record the links them to a Member record that represents an artist. A second record must be created by the user owning the artist/member; a Permission record.

The Permission record contains a link to some record(s) in the ArtworkStack. Gaining access to Pieces in this way grants Disposition rights to the managing user. Two flag fields in the Permission record can grant further management rights. The possibilities are:

- The right to dispose pieces
- The right to create Artworks or layers of them depending on permissions
- The right to edit Artworks or layers of them depending on permissions

The `managerOwned( )` method on the Artist entity is used to decide whether the User can access all of an Artist's Artworks without restriction or whether they must build ArtworkStacks through the control of Permission records.

I have wondered if the ability to detect ownership vs management rights at the level of some entity in the ArtworkStack will be necessary. The Stack should be able to deliver this information and should always be available. If not, it may be necessary to deposit some flag or method in the individual entities before they are released into the wild.

The registered user that created the Artwork records owns the data. If a manager creates records for an artist and that artist later becomes a registered user, they do not own the data. The original user retains ownership and must extend management rights to the artist. Or they can choose to transfer ownership of the records.


## problems?

How will limited permissions effect the management of portfolios and 'assembled works' like that? We don't want to extend management to the individual works... But there does need to be some degree of carry-over record access.

## Thoughts on when Permission Objects take action

Permissions determine the visibility of foreign data for a manager, and control the actions that manager can take on the visible data.

This means Permissions objects will be called on for advice in two circumstances:

1. During the queries that gather data
   - No data will be returned that isn't allowed so there will be no risk of inappropriate data exposure
2. During page rendering
   - Create/Edit/Delete tools will only appear when allowed

To accomplish the second goal, Permissions must be included in any object who's content was controlled by it.

It looks like an Interface should be designed so for any object that is controlled by permissions too. Just to make everything act the same for us poor programmers.

### Accessor abilities

So there will be special requirements for the accessors in entities who's contents are controlled by Permission. They will need to handle situations where normally present data is mission.

### Helper abilities

The Helpers that operate on entities who's contents are controlled by Permission will need special abilities too. The should accept both the entitiy and permissions objects and control UX features.

```
 class SomeManagerHelper extends Helper {

    public function renderTool($entity, $permission = TRUE) {
      if ($permission || $permision->allowTool($entity) {
         echo 'tool for user';
      } else {
         echo 'simple data display';
      }
    }
 }
```

## An Interface For Shared Objects

A good name for the Interface of objects who's contents are controlled by Permission might be `SharableInterface`. Just a first thought. I don't actually have a clear idea yet of what might be in this or who would implement it.

Based on the requirements listed in [Thoughts on when Permission object take action](#thoughts-on-when-permission-object-take-action), we might expect Tables and Helpers. But with two classes of such different type, could a single interface work?

```
 SomeStackTable implements SharableInterface {

   /**
    * This might be the implementation method
    */
   protected function checkPermission($contextData) {
      // Perhaps this would add query arguments?
      return $result;
   }

   /**
    * A method that may or may not be under permissions control
    */
   public function marshalSomeData($id, $stack) {
      // prepare some query
      $query = $this->checkPermission([$query, $otherContextData);
      // additional processes
   }
 }
```


Topics: Stack, Layer, Studio Manager, Artist, Permission
