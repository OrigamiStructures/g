# Pieces: Funtional and Presentational 

## Stacks, rendering, and API delivery

At the current point in the code I've written ArtworkStacks,  the RolodexCard hierarchy), and the ArtistManifests.

I designed and wrote these from a *presentation perspective*; trying to solve the problem of delivering one predictable data object that was sufficient in any page rendering scenario we might have.

These objects would then be convenient API delivery packages. We could use the API packages to reproduce system behavior in mobile apps and third parties would have objects that were comprehensive for a data structure. 
With one or more, they would have enough data to create new behaviors in new environments.

## Creeping functionality

While writing ArtistManifests, functional concerns started to move to the forefront.

The Issuer of the manifest is transforming a simple Member record into an Artist, opening the record to a vast array of system activity. They are simultaneously granting data access rights to some other user. The basic components composed into the manifest identify display units—Members and Artworks primarily—and that allowed page rendering. But there are fields and records that control details of data access for the manager and  others that control exposure of one manager to another.

Still, this is primarily data for presentation. We're just supporting a new layer of logic before display and laying the foundation for interactions between system users.

## Primarily functional objects

[Also see Dispositions](/article/dispositions "Dispositions")

Pieces have a small presentation footprint. Their main role is *functional*; they serve to group and characterize dispositions. They also mingle editions (in the case of portfolios and other aggregate works).  

In the case of a unique work, it feels to the user as though the artwork *is* the piece and all the information on the scree is piece information. Despite this illusion, only numbered pieces have any presentation data that traces back to a fixed, real world object. And that datum is just a simple identifying label, a number or short string.

It is likely that a suite of images will accumulate in some cases to document the actual piece being represented. But as you'll see, this does not have to stay anchored through the logical chain `Image->link->Piece->label->real-world-object`.

The piece record has only two main data points that describe it directly, `number` and `quantity`. The use of one excludes the use of the other. Numbered editions use the `number` field and open editions use the `quantity` field.

### Un-numbered pieces

The `quantity` field points directly to the dominant functional role of Piece objects. This value represents some group of pieces in a common disposition state. It is the result of processes carried out by Artist Managers and is fluid over time, able to both increase and decrease within a range set in the Edition/Format.

A "piece" described by its quantity value does not represent anything fixed in the real world. It represents the number of items that have arrived in a common state. It is a snapshot of current conditions and can be expected to change in the future.

### Numbered pieces

Superficially, it seems that numbered pieces—described by a unique label rather than `quantity`—do represent real world objects. However, the labeling of any given real-world piece is an arbitrary act. The label could be change for a variety of reasons.

Because of this reality, the Piece actually stands as the identifier of a history; all the disposition events recorded in relation to the current label.

If we have images and dispositions linked to piece_id = 55 with number = 3, then those images and that history of activity describe piece 3, some real world object. Simply performing an edit—number = 12—and relabeling the real world piece to 12, changes these facts. Now the images are of #12 and the events happened to #12.

### Piece function

So there are at least two functional roles of a piece object.

1. Track the populations that exist in specific Disposition states.
2. Attach documentation and histories to specific labeled individuals.

Recognizing that a population may be one individual, and that a state described by a disposition is the base component of a history, we see these two functions as closely related.

We could reformulate this as a single role with variations:

**Link a piece population to one concrete dispositional state**

*Variations*

- For un-numbered pieces, manage changing populations across the set of currently active states
- For numbered pieces, maintain the full history of all past states

Topics: Disposition, Studio Manager

 