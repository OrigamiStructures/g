# Manifest Terminology

This is a different way of exploring the ideas Jason was going to look at. His approach is to define specific example relationships that could be described by Manifests.

## Roles and possible names

- A Manifest record identifying Supervisor/Manager/Artist
   - **ArtistManifest**
- A Manifest record identifying only Supervisor/Manager
   - **ManagerManifest**
- A Manifest which names the user as Supervisor but not as Manager
   - AssignedManagers
   - **ManagementStaff** (preferred?)
- A Manifest which names the user as Manager, but not as Supervisor
   - ManagementResponsibilities (preferred?)
   - AssignedResponsibilities
- Manifests that identify self-owned Artists
   - **OwnedArtists** (preferred?)
   - Artists
- Manifests that identify self-owned-artists that have assigned **ManagementStaff**
   - **ManagedArtists**
- The stack or page that explains the permissions and details of one Manager regarding one Artist
   - **ManagementAgreement**

I don't think there would need to be a manifest to define self-as-manager because the record would not define anything that couldn't be assumed about the user. Manifests to define self-owned-artists on the other hand are required to define the artist (?)

This may not actually be true. I think the self-owned-artists need manifests so handling of artists becomes normalized no matter which variety arrives in code. I wonder if manager manifests need to be generated for the same reason.

## Organizing the pages

Using these terms, here are possible pages, the kind of manifests they focus on, and what tasks they facilitate.

## Supervisor Page

- **ManagementStaff**
   - Choosing one of the listed managers take this supervisor [to a page](#supervise-manager) where they can view and adjust the details of the assignments made to that manager
   - A tool to recruit/acknowledge an new manager
      - From existing person
      - From person defined on the fly
      - Respond to pending requests-to-manage that have been received (or are these emailed links that never appear in the system?)
      - A list of pending recruitment offeres for reminder/deletion?
- **ManagedArtists**
   - Choosing one of the listed artists takes this supervisor  [to a page](#supervise-artist)  where they can view and adjust details of their managers
   - A tool to identify a new artist
      - From existing person
      - From person defined on the fly

### Supervise/Manager/:id

- **ManagedArtists** for the single **ManagementStaff**
    - Each artist can be revoked from this page and is linked to the details of this management agreement
	- Adjustments to the **ManagerManifest** can be made on this page (CRUD and Contact Permission changes)
	- Allow navigation to a single **ManagementAgreement** [see Supervise/Manager/:id/Artist:id](#supervise-manager-id-artist-id)

><small>**Pagination Note**   
>Including the address book on this page would create a double-pagination condition. Typically, the primary page data is paginated (in this case the **ManagedArtists** for this staff member. Page requests get embedded in the URL by Cake. Address data would also need to be paginated and some extension of the PaginationComponents parsing of URL parameters would have to be designed to handle this. Creating a separate page for contact permission supervision would solve the problem.</small>

#### Supervise/Manager/:id/Artist:id

This page is accessible from multiple contexts so it should be named in a source-agnostic way but it should probably retain proper 'back' button context.

- Details of a single **ManagementAgreement**
- Allow changes in CRUD settings for the permitted Artworks
- Allow changes to the Permission set

### Supervise/Artist/:id

- **ManagementStaff** for the single ManagedArtist

#### Supervise/Artist/:id/Manager:id

- Details of a single **ManagementAgreement**




Topics: Studio Manager, Artist, Manager,