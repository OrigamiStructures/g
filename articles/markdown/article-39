# RenumberRequests and rules for renumbering

In this document RenumberRequest objects are called **RR**, the RenumberRequests container object is called **RRs** and the RenumberMessaging object is call **RM**. 

Other terminology used in the code:

- The original number of a piece is called ***oldNum***
- The number being assigned as a replacement to oldNum is called ***newNum***
- The piece that is receiving a newNum is called a ***receivier***
- The piece that lost its number in the exchange is call the ***provider***

This means that you can always find a provider/receiver pair where `provider->oldNum = receiver->newNum`

## The strategy

- Each number change is encoded in an RR object
   - RR objects contain flags indicating various errors or ambiguities
   - RR objects output a set of messages explaining their errors of describing the valid change requested.
- RRs holds all the RR objects and enforces the rules.
- The RRs can assemble anRM object containing all the messages.
- Among other features, RM has an `error( )` method that reports on the result of the change request. `FALSE` is the desired return value.
   - RM is passed to the View to report back to the system user.

## Properties used

### Storage and reference properties

- \_heap   
   The heap stores the sorted collection of RR objects. The sorting strategy was (and is) a point of debate. The sum of the old and new number, ascending is being used.   
   This probably won't be useful when a symbol system is used for numbering pieces.
- \_indexed\_list   
   This is a set of references to the RR objects; an array indexed by old-number  
   `[oldNum => RR{ }]`
- \_valid\_symbols
   An array of all valid piece numbers `[sym => sym]`

### Calculating properties

There are several tally, usage, and checklist properties that keep track of the evolving renumbering situation. Their roles will be described in later sections.
 
- \_bad\_symbols
- \_explicit\_receivers
- \_receiver\_checklist
- \_explicit\_providers  
- \_providers\_checklist


## Rules for renumbering

One detail regarding the actual implementation, Piece entities are not used during the request or validation process. When pieces are mentioned, we will be referring to RR objects. These objects carry all the data the user needs to make the request and that we need to validate it.

**Rules**

1. <span id="rule-1">Each involved piece must act as a ***provider*** exactly once </span>
2. <span id="rule-2">Each involved piece must act as a ***receiver*** exactly once.</span>
3. <span id="rule-3">All ***newNum***s must be in the set of valid symbols</span>

<span id="hidden-rule">The hidden implication</span> is that **each involved piece must act both as a provider and a receiver**.

Rule 2 is enforced by the nature of the form. Each piece has one input that might be filled with a new number for that piece. There is no way to assign more than one new number.

On the other hand, a number can be entered in many inputs so rule 3 can be accidentally violated.

The property that tracks [explicit provider](#explicit-provider-structure) use has a special structure to allow duplicate use detection.

### The implementing code

The first phase of rules-checking takes place as the RR objects are inserted into RRs. They're passed in one at a time as illustrated below.

`Providers` and `provider[ ]` refer directly or indirectly to the `_explicit_providers` property. `Receivers` refers to the `_explicit_receiver` property. 

![Required user/member record structure](http://g.origamistructures.com/w_img/insertRenumberRequestFlow.png)   

At the end of this process we have a few critical pieces of information.

- All violations of [Rule 3](#rule-3) (bad symbols) are known
   - The bad symbols are stored in the property [\_bad\_symbol](#bad-symbol-structure)).  
   In addition, each RR object that received a bad symbol has its `$_bad_new_number` flag set to `TRUE` and generate the error message "There is no #$newNum in this edition."
- We know the pieces that explicitly received a new number (property illustrated in [\_explicit\_receiver structure](#explicit-receiver-structure)).
- We know the pieces that are loosing numbers because of explicit reassignment to a new pieces (property illustrated in [\_explicit\_provider structure](#explicit-provider-structure)).
- We know about duplicate use of symbols ([rule 1 violations](#rule-1))
  - Each receiving piece is recorded in the second level of the [\_explicit\_provider](#explicit-provider-structure) as `oldNum => oldNum`.  
   The RR objects that receive copies of the new number also have their `$duplicate_new_number` flag set to `TRUE` and generate the error message "Can't change multiple pieces ($dupCount) to #$newNum
   
   
<span id="bad-symbol-structure">*\_bad\_symbol structure*</span>

```php
$_bad_symbols [
   badSym1 => badSym1,
   badSym2 => badSym2,
 ],
```

<span id="explicit-receiver-structure">*\_explicit\_receiver structure*</span>

```php
$_explicit_receiver = [
    oldNum1 => oldNum1,
    oldNum2 => oldNum2,
];
```

<span id="explicit-provider-structure">*\_explicit_provider structure*</span>

```php
$_explicit_provider = [
    newNum1 => [
        oldNum1 => oldNum1, //a piece receiving newNum1
        oldNum2 => oldNum2, //a duplicate use of newNum
    ],
    newNum2 => [
        oldNum3 => oldNum3, //a piece receiving newNum2
    ],
]; 
```
### Final rule enforcement

Verification of the remaining rules is deferred until the messages are called for, or the heap is accessed.

#### Implementation of the final rules

Consider the simple request "change #2 to #1". Inserting this request builds the two properties which reflect the explicit **receiver** and **provider** requests. 

Next, to satisfy our rules the provider (#1) must also be a receiver and the receiver (#2) must also be a provider.

A provider checklist is created from the list of receivers and a receivers checklist is created from the list of providers:

```php
$this->_provider_checklist = $this->_explicit_receivers;
$this->_reciever_checklist = $this->_explicit_providers;
```
Now we can loop over these new properties creating any new RR objects that are implied but not supplied, and flagging any further errors.

First a simple checklist process:

![Required user/member record structure](http://g.origamistructures.com/w_img/RRChecklistProcess.png)   

If the user made a complete request there will be no elements left in either checklist and the heap or message set will be returned. There may or may not be errors, but the rule that each number must be a provider and receiver has been satisfied.

There are three failure modes the code detects and adapts to:

1. Implied request
2. Vague receiver
3. Missing request.

#### Implied requests

The earlier example–change #2 to #1–would create an implied request

The process for this example is:

```php
// the request values
// $oldNum = 2
// $newNum = 1

// after insert
$_explicit_receiver = [2 => 2];
$_explicit_provider = [1 => [2 => 2]];

// the checklists
$_provider_checklist = [2 => 2];
$_receiver_checklist = [1 => [2 => 2]];
```
The check-off loop will leave the two checklist properties unchanged.

But the presence of **a single element in each list** allows us to create a matching request and insert it in the heap. The resulting piece will include a message informing the use that it was system-generated.

#### Vague receiver and missing requests

The request

- change #1 to #2
- change # 3 to #4

will illustrate the two remaining failure modes

This request pair will create this sequence:

```php
// after insert
$_explicit_receiver = [
    1 => 1,
    3 => 3
];
$_explicit_provider = [
   2 => [1 => 1],
   4 => [3 => 3],

];

// oldNums 1, 3
// newNums 2, 4

// after the checklist process using
$_provider_checklist = [
	1 => 1,
	3 => 3

];
$_receiver_checklist = [
	2 => [1 => 1],
	4 => [3 => 3],
];
```

The order of operations means that the situation where both checklist properties have exactly one member has been handled.

So, on detection of more than one remaining provider, those requests will be flagged with a *vague receiver* message; "Can't determine which piece should receive #$oldNum." 

And, any remaining receivers will have RR objects created and inserted for them. They will have a NULL new number, a TRUE *bad number* flag, and the message "#$oldNum was reassigned but no new number was provided."

## Summary of RR flags and status messages



- Valid request 
   - \_renumber\_message = TRUE
   - Change piece #*oldNum* to #*newNum*.
- Vague receiver
    - \_renumber\_message = TRUE
    - \_vague\_receiver = TRUE
   - Can't determine which piece should receive #*oldNum.
   - Change piece #*oldNum* to #*newNum*.
- Implied change
   - \_renumber\_message = FALSE
   - \_implied\_change = TRUE
   - Other changes implied the change of #*oldNum* to #*newNum*.
- Duplicate number
   - \_renumber\_message = FALSE
   - \_duplicate\_number = TRUE
   - Can't change multiple pieces (*dupCount*) to #*newNum*.
- Bad symbol or number
   - \_renumber\_message = FALSE
   - \_bad_new\_number = TRUE
   - There is no #*newNum* in this edition.
- Overlooked receiver
   - \_renumber\_message = FALSE
   - \_bad_new\_number = TRUE
   - #*oldNum* was reassigned but no new number was provided.

## Getting the results of a set of requests

`RRs->messagePackage( )` will return an RM object with the current messages for the set of requests.

`RM->errorCount( )` will return the number of error messages for the request set.

`RM->errors( )` will return FALSE or an array of error message indexed by *oldNum*.

`RM->summaries( )` will return the messages that describe valid proposed moves (change x to y) indexed by *oldNum*.

`RM->request(oldNum)` will return a single RR object.

