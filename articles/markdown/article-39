# RenumberRequests rules for renumbering

In this document RenumberRequest objects are called **RR**, and the RenumberRequests container object is called **RRs**. 

Other terminology used in the code:

- The original number of a piece is called ***oldNum***
- The number being assigned as a replacement to oldNum is called ***newNum***
- The piece that is receiving a newNum is called a ***receivier***
- The piece that lost its number in the exchange is call the ***provider***

This means that `provider->oldNum = receiver->newNum`

## Properties used

### Storage and reference properties

- \_heap   
   The heap stores the sorted collection of RR objects. The sorting strategy was (and is) a point of debate. The sum of the old and new number ascending is being used.   
   This probably won't be useful when a symbol system is used for numbering pieces.
- \_indexed\_list   
   This is a second set of references to the RR objects; an array indexed by old-number `[oldNum => RR{ }]
- \_valid\_symbols
   An array of all valid piece numbers `[sym => sym]`

### Calculating properties

There are several tally, usage, and checklist properties that keep track of the evolving renumbering situation. Their role will be described in a later section.
 
- \_bad\_symbols
- \_explicit\_receivers
- \_receiver\_checklist
- \_explicit\_providers  
   In the diagram below this property is represented as `provider`
- \_providers\_checklist


## Rules for renumbering

One detail regarding the actual implementation, Piece entities are not used during the request or validation process. When pieces are mentioned, we will be referring to RR objects. These objects carry all the data user needs to make the request and that we need to validate it.

**Rules**

- Each involved piece must act as a ***provider*** exactly once 
- Each involved piece must act as a ***receiver*** exactly once.
- All ***newNum***s must be in the set of valid symbols

The obvious implication is that **each involved piece must act both as a provider and a receiver**.

### Implementing code

The first phase of rules-checking takes place as the RR objects are inserted into RRs. They're passed in one at a time as illustrated below.

![Required user/member record structure](http://g.origamistructures.com/w_img/insertRenumberRequestFlow.png)   

At the end of this process we have a few critical pieces of information.

- We know the original number of every piece that the user explicitly wants to change (property illustrated in [code block 1](#code-block-1).  

- We know the original number of every piece that is loosing its number because it has been explicitly assigned to a new piece (property illustrated in [\_explicit\_reciever structure](#explicit-receiver-structure).

#### \_explicit_receiver structure

```php
$_explicit_receiver = [
    oldNum1 => oldNum1,
    oldNum2 => oldNum2,
];
```

#### code block 2

```php
$_explicit_provider = [
    newNum1 => [
        oldNum1 => oldNum1,
        oldNum2 => oldNum2,
    ],
    newNum2 => [
        oldNum3 => oldNum3,
    ],
]; 
```

